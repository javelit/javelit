///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS io.javelit:javelit:0.60.0

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.file.Path;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;import io.javelit.core.Jt;

public class AudioExample {
    public static void main(String[] args) throws IOException {
        Jt.title("# Audio Component Showcase").use();
        Jt.markdown("This demo showcases all the capabilities of the `st.audio` component in Javelit.").use();

        // Example 1: Simple public URL with autoplay
        Jt.title("## 1. Public URL with Autoplay").use();
        Jt.markdown("**Note:** Autoplay may be blocked by the browser.").use();
        Jt.audio("https://github.com/javelit/public_assets/raw/refs/heads/main/audio/piano-chords.mp3")
                .autoplay(true)
                .use();

        // Example 2: Simple public URL
        Jt.title("## 2. Simple Public URL").use();
        Jt.markdown("Load audio from a public URL. This is the simplest way to display audio.").use();
        Jt.audio("https://github.com/javelit/public_assets/raw/refs/heads/main/audio/piano-chords.mp3").use();

        // Example 3: Static folder link
        Jt.title("## 3. Audio from Static Folder").use();
        Jt.markdown("""
                Load audio from your application's static folder. The file path is relative to the static directory.
                This is useful for assets bundled with your application.
                """).use();
        Jt.audio("app/static/piano-chords.mp3").use();

        // Example 4: Local file
        Jt.title("## 4. Audio from Local File").use();
        Jt.markdown("""
                Load audio from a local file path. The audio data is read from disk and served by Javelit.
                This is useful for accessing audio files anywhere on the filesystem.
                """).use();
        Jt.audio(Path.of("examples/audio/piano-chords.mp3")).use();

        // Example 5: Generated bytes (WAV beep)
        Jt.title("## 5. Audio from Generated Bytes").use();
        Jt.markdown("""
                Generate audio programmatically from raw bytes. This example creates a 2-second beep tone at 440 Hz (A4 note).
                The audio is generated in-memory as a WAV file and served directly to the browser.
                """).use();
        byte[] beepWav = generateBeepWavBytes(2);
        Jt.audio(beepWav).format("audio/wav").use();

        // Example 6: Loop enabled
        Jt.title("## 6. Audio with Loop").use();
        Jt.markdown("""
                Enable looping to continuously replay the audio. When the audio reaches the end,
                it automatically starts from the beginning.
                """).use();
        Jt.audio("https://github.com/javelit/public_assets/raw/refs/heads/main/audio/piano-chords.mp3")
                .loop(true)
                .use();

        // Example 7: Start and end time
        Jt.title("## 7. Audio with Start and End Time").use();
        Jt.markdown("""
                Control which portion of the audio to play by specifying start and end times.
                This example plays only from 3 seconds to 6 seconds of the audio file.
                The player will stop at the end time.
                """).use();
        Jt.audio("https://github.com/javelit/public_assets/raw/refs/heads/main/audio/piano-chords.mp3")
                .startTime(3)
                .endTime(6)
                .use();

        // Example 8: Start, end, and loop
        Jt.title("## 8. Audio with Start, End, and Loop").use();
        Jt.markdown("""
                Combine time constraints with looping. This example continuously loops the segment
                from 3 seconds to 6 seconds. When the audio reaches 6 seconds, it jumps back to 3 seconds
                and continues playing indefinitely.
                """).use();
        Jt.audio("https://github.com/javelit/public_assets/raw/refs/heads/main/audio/piano-chords.mp3")
                .startTime(3)
                .endTime(6)
                .loop(true)
                .use();
    }

    /**
     * Generates a simple beep WAV file as a byte array.
     * Creates a square wave at 440 Hz (A4 note) for the specified duration.
     *
     * @param seconds Duration of the beep in seconds
     * @return WAV file as byte array
     * @throws IOException If WAV writing fails
     */
    private static byte[] generateBeepWavBytes(int seconds) throws IOException {
        final float sampleRate = 44100;
        final int numSamples = (int) (seconds * sampleRate);
        final int numChannels = 1;        // mono

        byte[] data = new byte[numSamples];

        // Generate simple square wave beep at 440 Hz
        int period = (int) (sampleRate / 440); // ~440 Hz
        for (int i = 0; i < numSamples; i++) {
            data[i] = i % period < period / 2 ? (byte) 127 : (byte) -128;
        }

        // Wrap raw PCM data into WAV format
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        AudioFormat format = new AudioFormat(
                sampleRate,
                8,                // bits per sample
                numChannels,
                true,             // signed
                false             // little endian
        );

        try (AudioInputStream ais = new AudioInputStream(
                new ByteArrayInputStream(data),
                format,
                numSamples)) {
            AudioSystem.write(ais, AudioFileFormat.Type.WAVE, baos);
        }

        return baos.toByteArray();
    }
}
