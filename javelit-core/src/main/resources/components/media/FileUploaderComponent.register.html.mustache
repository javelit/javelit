{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<link rel="stylesheet" href="{{ MATERIAL_SYMBOLS_CDN }}">
<script type="module">
    import { LitElement, html, css, unsafeHTML } from '{{ LIT_DEPENDENCY }}';

    class JtFileUploader extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-lg) 0;
            }

            :host([width]:not([width="stretch"])) {
                width: var(--input-width);
                max-width: 100%;
            }

            .uploader-container {
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-xs);
            }

            .label-row {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                font-weight: var(--jt-font-weight-medium);
                color: var(--jt-text-primary);
                margin: 0;
            }

            .label.spacer {
                visibility: hidden;
            }

            .upload-area {
                background-color: var(--jt-bg-secondary);
                border: 2px dashed var(--jt-border-color);
                border-radius: var(--jt-border-radius);
                padding: var(--jt-spacing-xs) var(--jt-spacing-sm);
                transition: all var(--jt-transition-fast);
                position: relative;
            }

            .upload-area:not(.disabled):hover {
                background-color: var(--jt-bg-tertiary);
                border-color: var(--jt-theme-color);
            }

            .upload-area.disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .upload-area.dragover {
                background-color: var(--jt-bg-tertiary);
                border-color: var(--jt-theme-color);
                border-style: solid;
            }

            .upload-content {
                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: space-between;
                gap: var(--jt-spacing-sm);
                padding: var(--jt-spacing-md);
                flex-wrap: wrap;
            }

            .upload-content-left {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-md);
            }

            .upload-icon {
                font-family: 'Material Symbols Rounded';
                font-variation-settings: 'FILL' 0, 'wght' 300, 'GRAD' 0, 'opsz' 24;
                font-size: 32px;
                color: var(--jt-text-secondary);
                flex-shrink: 0;
            }

            .upload-text {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                color: var(--jt-text-secondary);
            }

            .accepted-types {
                margin-top: var(--jt-spacing-xs);
                font-size: var(--jt-font-size-xs);
                opacity: 0.8;
            }

            .browse-button {
                background-color: var(--jt-bg-primary);
                color: var(--jt-text-primary);
                border: 1px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius-sm);
                padding: var(--jt-spacing-xs) var(--jt-spacing-lg);
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                font-weight: var(--jt-font-weight-medium);
                cursor: pointer;
                transition: all var(--jt-transition-fast);
            }

            .browse-button:not(:disabled):hover {
                background-color: var(--jt-bg-tertiary);
                border-color: var(--jt-text-secondary);
            }

            .browse-button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .file-input {
                display: none;
            }

            .files-list {
                margin-top: var(--jt-spacing-xs);
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-xs);
                padding: 0 var(--jt-spacing-sm);
            }

            .file-item {
                display: flex;
                align-items: center;
                justify-content: space-between;
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                // background-color: var(--jt-bg-secondary);
                border: 1px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius-sm);
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
            }

            .file-info {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
                flex: 1;
            }

            .file-icon {
                font-family: 'Material Symbols Rounded';
                font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 20;
                font-size: 20px;
                color: var(--jt-text-secondary);
            }

            .file-name {
                color: var(--jt-text-primary);
                word-break: break-word;
            }

            .file-size {
                color: var(--jt-text-muted);
                margin-left: var(--jt-spacing-sm);
                white-space: nowrap;
            }

            .remove-button {
                background: none;
                border: none;
                padding: var(--jt-spacing-xs);
                cursor: pointer;
                color: var(--jt-text-muted);
                transition: color var(--jt-transition-fast);
                font-family: 'Material Symbols Rounded';
                font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 20;
                font-size: 20px;
            }

            .remove-button:hover {
                color: var(--jt-error-color);
            }

            .upload-status {
                margin-top: var(--jt-spacing-sm);
                padding: var(--jt-spacing-sm);
                border-radius: var(--jt-border-radius-sm);
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-xs);
                text-align: center;
            }

            .upload-status.uploading {
                background-color: var(--jt-info-bg);
                color: var(--jt-info-color);
            }

            .upload-status.success {
                background-color: var(--jt-success-bg);
                color: var(--jt-success-color);
            }

            .upload-status.error {
                background-color: var(--jt-error-bg);
                color: var(--jt-error-color);
            }

            .loading-spinner {
                display: inline-block;
                width: 14px;
                height: 14px;
                border: 2px solid currentColor;
                border-right-color: transparent;
                border-radius: 50%;
                animation: spin 0.75s linear infinite;
                margin-right: var(--jt-spacing-xs);
            }

            @keyframes spin {
                to { transform: rotate(360deg); }
            }
        `;

        static properties = {
            label: { type: String },
            types: { type: Array },
            acceptMultipleFiles: { type: String, attribute: 'accept-multiple-files' },
            help: { type: String },
            disabled: { type: Boolean },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String },
            componentKey: { type: String, attribute: 'component-key' },
            value: { type: Array },
            uploadStatus: { type: String, state: true },
            uploadMessage: { type: String, state: true }
        };

        constructor() {
            super();
            this.value = [];
            this.acceptMultipleFiles = 'FALSE';
            this.disabled = false;
            this.labelVisibility = 'visible';
            this.width = 'stretch';
            this.uploadStatus = null;
            this.uploadMessage = null;
        }

        updated(changedProperties) {
            // Update width CSS variable
            if (changedProperties.has('width') && this.width && this.width !== 'stretch') {
                this.style.setProperty('--input-width', `${this.width}px`);
            } else if (this.width === 'stretch') {
                this.style.removeProperty('--input-width');
            }
        }

        handleDragOver(e) {
            if (this.disabled) return;
            e.preventDefault();
            e.currentTarget.classList.add('dragover');
        }

        handleDragLeave(e) {
            if (this.disabled) return;
            e.currentTarget.classList.remove('dragover');
        }

        handleDrop(e) {
            if (this.disabled) return;
            e.preventDefault();
            e.currentTarget.classList.remove('dragover');

            const files = Array.from(e.dataTransfer.files);
            this.processFiles(files);
        }

        handleBrowseClick() {
            if (this.disabled) return;
            const input = this.shadowRoot.querySelector('.file-input');
            input.click();
        }

        handleFileSelect(e) {
            if (this.disabled) return;
            const files = Array.from(e.target.files);
            this.processFiles(files);
        }

        processFiles(files) {
            // Filter by type if specified
            let filteredFiles = files;
            if (this.types && this.types.length > 0) {
                filteredFiles = files.filter(file => {
                    const fileExt = '.' + file.name.split('.').pop().toLowerCase();
                    const mimeType = file.type;
                    return this.types.some(type =>
                            type === fileExt || type === mimeType ||
                            (type.includes('*') && mimeType.startsWith(type.replace('*', '')))
                    );
                });
            }

            // Handle multiple files setting
            if (this.acceptMultipleFiles === 'FALSE' && filteredFiles.length > 0) {
                filteredFiles = [filteredFiles[0]];
            }

            if (filteredFiles.length > 0) {
                this.uploadFiles(filteredFiles);
            }
        }

        async uploadFiles(files) {
            this.uploadStatus = 'uploading';
            this.uploadMessage = 'Uploading files...';
            this.requestUpdate();

            const formData = new FormData();
            files.forEach((file, index) => {
                formData.append(`file${index}`, file);
            });

            try {
                const response = await fetch('/_/upload', {
                    method: 'PUT',
                    headers: {
                        'X-XSRF-TOKEN': window.javelit.xsrfToken,
                        'X-Session-ID': window.javelit.sessionId,
                        'X-Component-Key': this.componentKey
                    },
                    body: formData
                });

                if (response.ok) {
                    this.uploadStatus = 'success';
                    this.uploadMessage = 'Upload successful!';
                    // Backend will send update with the processed files
                } else {
                    const errorText = await response.text();
                    this.uploadStatus = 'error';
                    this.uploadMessage = `Upload failed: ${errorText}`;
                }
            } catch (error) {
                this.uploadStatus = 'error';
                this.uploadMessage = `Upload error: ${error.message}`;
            }

            // Clear status after 3 seconds
            setTimeout(() => {
                this.uploadStatus = null;
                this.uploadMessage = null;
                this.requestUpdate();
            }, 3000);

            this.requestUpdate();
        }

        removeFile(index) {
            if (this.disabled) return;
            const newValue = [...this.value];
            newValue.splice(index, 1);
            this.value = newValue;

            // Send empty array if all files removed
            window.javelit.sendComponentUpdate(this.componentKey, newValue);
            this.requestUpdate();
        }

        formatFileSize(bytes) {
            if (!bytes) return '';
            const units = ['B', 'KB', 'MB', 'GB'];
            let size = bytes;
            let unitIndex = 0;

            while (size >= 1024 && unitIndex < units.length - 1) {
                size /= 1024;
                unitIndex++;
            }

            return `${size.toFixed(1)} ${units[unitIndex]}`;
        }

        getAcceptAttribute() {
            if (!this.types || this.types.length === 0) return '';
            return this.types.join(',');
        }

        render() {
            const hasFiles = this.value && this.value.length > 0;

            return html`
                <div class="uploader-container">
                    <div class="label-row">
                        ${this.labelVisibility !== 'collapsed' ? html`
                            <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                ${this.labelVisibility === 'hidden' ? html`&nbsp;` : html`<div class="markdown-content">${unsafeHTML(this.label)}</div>`}
                            </div>
                        ` : ''}
                        ${this.help && this.labelVisibility === 'visible' ? html`
                            <jt-tooltip text="${this.help}"></jt-tooltip>
                        ` : ''}
                    </div>

                    <div
                        class="upload-area ${this.disabled ? 'disabled' : ''}"
                        @dragover="${this.handleDragOver}"
                        @dragleave="${this.handleDragLeave}"
                        @drop="${this.handleDrop}"
                    >
                        <div class="upload-content">
                            <div class="upload-content-left">
                            <span class="upload-icon">upload_file</span>
                            <div class="upload-text">
                                <span>${this.acceptMultipleFiles === 'DIRECTORY' ?
                    'Drag and drop a folder here' :
                    this.acceptMultipleFiles === 'TRUE' ?
                            'Drag and drop files here' :
                            'Drag and drop a file here'}
                                </span>
                                <div>
                                <small>
                                    Limit 200MB
                                    ${this.types && this.types.length > 0 ? html`
                                    â¢  ${this.types.map(type => (type.startsWith('.') ? type.slice(1) : type).toUpperCase()).join(', ')}`: ''}
                                </small>
                                </div>
                            </div>
                            </div>
                            <button
                                class="browse-button"
                                ?disabled="${this.disabled}"
                                @click="${this.handleBrowseClick}"
                            >
                                Browse files
                            </button>
                        </div>
                        <input
                            class="file-input"
                            type="file"
                            accept="${this.getAcceptAttribute()}"
                            ?multiple="${this.acceptMultipleFiles !== 'FALSE'}"
                            ?webkitdirectory="${this.acceptMultipleFiles === 'DIRECTORY'}"
                            ?disabled="${this.disabled}"
                            @change="${this.handleFileSelect}"
                        />
                    </div>

                    ${hasFiles ? html`
                        <div class="files-list">
                            ${this.value.map((file, index) => html`
                                <div class="file-item">
                                    <div class="file-info">
                                        <span class="file-icon">description</span>
                                        <span class="file-name">${file.filename || file.name}</span>
                                        <span class="file-size">${this.formatFileSize(file.size || file.content?.length)}</span>
                                    </div>
                                    ${!this.disabled ? html`
                                        <button
                                            class="remove-button"
                                            @click="${() => this.removeFile(index)}"
                                            title="Remove file"
                                        >
                                            close
                                        </button>
                                    ` : ''}
                                </div>
                            `)}
                        </div>
                    ` : ''}

                    ${this.uploadStatus ? html`
                        <div class="upload-status ${this.uploadStatus}">
                            ${this.uploadStatus === 'uploading' ? html`
                                <span class="loading-spinner"></span>
                            ` : ''}
                            ${this.uploadMessage}
                        </div>
                    ` : ''}
                </div>
            `;
        }
    }

    customElements.define('jt-file-uploader', JtFileUploader);
</script>
