{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css} from '{{ LIT_DEPENDENCY }}';
    
    class JtExpander extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}
            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
            }
            
            :host([width]:not([width="stretch"])) {
                width: var(--expander-width);
                max-width: 100%;
            }
            
            
            .chevron {
                font-family: 'Material Symbols Rounded';
                font-size: var(--jt-font-size-lg);
                color: var(--jt-text-primary);
                transition: transform var(--jt-transition-fast), color var(--jt-transition-fast);
                font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 20;
            }
            
            details[open] .chevron {
                transform: rotate(180deg);
            }
            
            .label {
                flex: 1;
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                font-weight: var(--jt-font-weight-normal);
                color: var(--jt-text-primary);
                margin: 0;
                transition: color var(--jt-transition-fast);
            }
            
            
            details {
                border: 1px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius);
                overflow: hidden;
            }
            
            summary {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
                padding: var(--jt-spacing-md) var(--jt-spacing-lg);
                cursor: pointer;
                user-select: none;
                list-style: none;
            }
            
            summary::-webkit-details-marker {
                display: none;
            }
            
            summary::marker {
                display: none;
            }
            
            summary:hover .label {
                color: var(--jt-theme-color);
            }
            
            summary:hover .chevron {
                color: var(--jt-theme-color);
            }
            
            .content-wrapper {
                padding: var(--jt-spacing-lg);
            }
            
            ::slotted(*) {
                display: block;
            }
        `;
        
        static properties = {
            label: {type: String},
            expanded: {type: Boolean, reflect: true},
            width: {type: String}
        };
        
        constructor() {
            super();
            this.label = '';
            this.expanded = false;
            this.width = 'stretch';
            this.animation = null;
            this.isClosing = false;
            this.isExpanding = false;
        }
        
        firstUpdated() {
            super.firstUpdated();
            
            // Set initial state without animation
            const details = this.shadowRoot.querySelector('details'); 
            if (details) {
                details.open = this.expanded;
            }
        }
        
        updated(changedProperties) {
            // Update width CSS variable if needed
            if (changedProperties.has('width')) {
                if (this.width && this.width !== 'stretch') {
                    this.style.setProperty('--expander-width', `${this.width}px`);
                } else {
                    this.style.removeProperty('--expander-width');
                }
            }
            
            // Handle programmatic changes to expanded property
            if (changedProperties.has('expanded') && !this.isExpanding && !this.isClosing) {
                const details = this.shadowRoot.querySelector('details');
                if (details && details.open !== this.expanded) {
                    if (this.expanded) {
                        this.open(details);
                    } else {
                        this.shrink(details);
                    }
                }
            }
        }
        
        formatText(label) {
            if (!label) return '';
            
            // Markdown formatting
            return label
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>')
                .replace(/:([a-zA-Z]+)\[(.*?)\]/g, '<span style="color: $1">$2</span>')
                .replace(/~~(.*?)~~/g, '<del>$1</del>');
        }
        
        handleClick(e) {
            e.preventDefault();
            const details = this.shadowRoot.querySelector('details');
            
            if (this.isClosing || !details.open) {
                this.open(details);
            } else if (this.isExpanding || details.open) {
                this.shrink(details);
            }
        }
        
        shrink(details) {
            this.isClosing = true;
            
            const startHeight = `${details.offsetHeight}px`;
            const summary = details.querySelector('summary');
            const endHeight = `${summary.offsetHeight}px`;
            
            if (this.animation) {
                this.animation.cancel();
            }
            
            this.animation = details.animate({
                height: [startHeight, endHeight]
            }, {
                duration: 400,
                easing: 'ease-out'
            });
            
            this.animation.onfinish = () => this.onAnimationFinish(details, false);
            this.animation.oncancel = () => this.isClosing = false;
        }
        
        open(details) {
            this.isExpanding = true;
            
            const summary = details.querySelector('summary');
            const startHeight = `${details.offsetHeight}px`;
            
            // Temporarily open to measure full height
            details.open = true;
            const endHeight = `${details.offsetHeight}px`;
            details.open = false;
            
            // Set starting height and open
            details.style.height = startHeight;
            details.open = true;
            
            if (this.animation) {
                this.animation.cancel();
            }
            
            this.animation = details.animate({
                height: [startHeight, endHeight]
            }, {
                duration: 400,
                easing: 'ease-out'
            });
            
            this.animation.onfinish = () => this.onAnimationFinish(details, true);
            this.animation.oncancel = () => this.isExpanding = false;
        }
        
        onAnimationFinish(details, open) {
            details.open = open;
            this.animation = null;
            this.isClosing = false;
            this.isExpanding = false;
            details.style.height = '';
            details.style.overflow = '';
            this.expanded = open;
        }
        
        render() {
            return html`
                <details ?open="${this.expanded}">
                    <summary @click="${this.handleClick}">
                        <div class="label markdown-content" .innerHTML="${this.formatText(this.label)}"></div>
                        <span class="chevron">expand_more</span>
                    </summary>
                    <div class="content-wrapper">
                        <slot></slot>
                    </div>
                </details>
            `;
        }
    }
    
    customElements.define('jt-expander', JtExpander);
</script>
