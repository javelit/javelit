{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import { LitElement, html, css, unsafeHTML } from '{{ LIT_DEPENDENCY }}';

    class JtToggle extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-lg) 0;
            }

            :host([width]:not([width="stretch"])) {
                width: var(--toggle-width);
                max-width: 100%;
            }

            .toggle-container {
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-xs);
            }

            .toggle-row {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .toggle-control {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-md);
                flex-grow: 1;
                justify-content: space-between;
            }

            .label-section {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
                flex: 1;
            }

            .label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                font-weight: var(--jt-font-weight-normal);
                color: var(--jt-text-primary);
                margin: 0;
            }

            .label.spacer {
                visibility: hidden;
            }


            .label a {
                color: var(--jt-theme-color);
                text-decoration: none;
            }

            .label a:hover {
                text-decoration: underline;
            }

            .label del {
                text-decoration: line-through;
            }

            /* Toggle Switch - using existing styles from settings */
            .toggle-switch {
                position: relative;
                display: inline-block;
                width: 48px;
                height: 24px;
                flex-shrink: 0;
            }

            .toggle-input {
                opacity: 0;
                width: 0;
                height: 0;
            }

            .toggle-slider {
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: var(--jt-bg-tertiary);
                border: 1px solid var(--jt-border-color);
                transition: all var(--jt-transition-normal);
                border-radius: 24px;
            }

            .toggle-slider:before {
                position: absolute;
                content: "";
                height: 18px;
                width: 18px;
                left: 2px;
                top: 2px;
                background: white;
                border-radius: 50%;
                transition: all var(--jt-transition-normal);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            .toggle-input:checked + .toggle-slider {
                background: var(--jt-theme-color);
                border-color: var(--jt-theme-color);
            }

            .toggle-input:checked + .toggle-slider:before {
                transform: translateX(24px);
            }

            .toggle-switch:hover .toggle-slider {
                box-shadow: 0 0 0 2px color-mix(in srgb, var(--jt-theme-color) 20%, transparent);
            }

            .toggle-input:disabled + .toggle-slider {
                opacity: 0.5;
                cursor: not-allowed;
                pointer-events: none;
            }

            .toggle-input:disabled + .toggle-slider:hover {
                box-shadow: none;
            }
        `;

        static properties = {
            label: { type: String },
            help: { type: String },
            disabled: { type: Boolean },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String },
            componentKey: { type: String, attribute: 'component-key' },
            checked: { type: Boolean, reflect: true }
        };

        constructor() {
            super();
            this.disabled = false;
            this.labelVisibility = 'visible';
            this.checked = false;
        }

        connectedCallback() {
            super.connectedCallback();
            this.updateWidth();
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('width')) {
                this.updateWidth();
            }
        }

        updateWidth() {
            if (this.width && this.width !== 'stretch') {
                if (this.width === 'content') {
                    this.style.removeProperty('--toggle-width');
                } else if (this.width.match(/^\d+$/)) {
                    this.style.setProperty('--toggle-width', `${this.width}px`);
                }
            } else {
                this.style.removeProperty('--toggle-width');
            }
        }

        handleToggle(e) {
            if (this.disabled) {
                e.preventDefault();
                return;
            }

            this.checked = e.target.checked;
            
            // Emit toggle change
            window.javelit.sendComponentUpdate(this.componentKey, this.checked);
        }

        render() {
            return html`
                <div class="toggle-container">
                    <div class="toggle-row">
                        ${this.labelVisibility !== 'collapsed' ? html`
                            <div class="toggle-control">
                                <div class="label-section">
                                    <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                        ${this.labelVisibility === 'hidden' ? html`&nbsp;` : html`<div class="markdown-content">${unsafeHTML(this.label)}</div>`}
                                    </div>
                                    ${this.help && this.labelVisibility === 'visible' ? html`
                                        <jt-tooltip text="${this.help}"></jt-tooltip>
                                    ` : ''}
                                </div>
                                <label class="toggle-switch">
                                    <input 
                                        type="checkbox" 
                                        class="toggle-input"
                                        .checked="${this.checked}"
                                        ?disabled="${this.disabled}"
                                        @change="${this.handleToggle}"
                                    >
                                    <span class="toggle-slider"></span>
                                </label>
                            </div>
                        ` : html`
                            <label class="toggle-switch">
                                <input 
                                    type="checkbox" 
                                    class="toggle-input"
                                    .checked="${this.checked}"
                                    ?disabled="${this.disabled}"
                                    @change="${this.handleToggle}"
                                >
                                <span class="toggle-slider"></span>
                            </label>
                        `}
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-toggle', JtToggle);
</script>
