{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import { LitElement, html, css, unsafeHTML } from '{{ LIT_DEPENDENCY }}';

    class JtSlider extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-lg) 0;
            }

            :host([width]:not([width="stretch"])) {
                width: var(--slider-width);
                max-width: 100%;
            }

            .slider-container {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .slider-content {
                flex: 1;
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-sm);
            }

            .label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-sm);
                font-weight: var(--jt-font-weight-medium);
                color: var(--jt-text-primary);
                margin: 0;
            }

            .label.spacer {
                visibility: hidden;
            }

            .slider-track-container {
                position: relative;
                display: block;
                width: 100%;
            }

            .slider-track {
                position: relative;
                height: 6px;
                width: 100%;
                background: var(--jt-bg-tertiary);
                border-radius: 3px;
                overflow: visible;
                margin: 20px 0 0px 0;
            }

            .slider-progress {
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                background: var(--jt-theme-color);
                border-radius: 3px;
            }

            .slider-input:hover ~ .slider-progress {
                background: var(--jt-theme-hover);
            }

            .slider-input:active ~ .slider-progress {
                background: var(--jt-theme-active);
            }

            .slider-input {
                position: absolute;
                top: 50%;
                left: 0;
                width: 100%;
                height: 30px;
                transform: translateY(-50%);
                opacity: 0;
                cursor: pointer;
                margin: 0;
                padding: 0;
                border: none;
                background: transparent;
                z-index: 5;
                -webkit-appearance: none;
                appearance: none;
            }

            .slider-input::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 30px;
                height: 30px;
                background: transparent;
                cursor: pointer;
            }

            .slider-input::-moz-range-thumb {
                width: 30px;
                height: 30px;
                background: transparent;
                cursor: pointer;
                border: none;
            }

            .slider-input:disabled {
                cursor: not-allowed;
            }

            .slider-thumb {
                position: absolute;
                top: 50%;
                width: 18px;
                height: 18px;
                background: var(--jt-theme-color);
                border: 2px solid var(--jt-bg-primary);
                border-radius: 50%;
                transform: translate(-50%, -50%);
                box-shadow: var(--jt-shadow-sm);
                pointer-events: none;
            }

            .slider-input:hover ~ .slider-thumb {
                transform: translate(-50%, -50%) scale(1.1);
                background: var(--jt-theme-hover);
                box-shadow: var(--jt-shadow);
            }

            .slider-input:active ~ .slider-thumb {
                transform: translate(-50%, -50%) scale(1.2);
                background: var(--jt-theme-active);
                box-shadow: var(--jt-shadow-lg);
            }

            .slider-input:disabled ~ .slider-thumb {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .value-display {
                position: absolute;
                top: -26px;
                font-family: var(--jt-font-family-mono);
                font-size: var(--jt-font-size-sm);
                color: var(--jt-theme-color);
                text-align: center;
                white-space: nowrap;
                transform: translateX(-50%);
                z-index: 10;
            }

            .min-max-labels {
                display: flex;
                justify-content: space-between;
                font-size: var(--jt-font-size-s);
                color: var(--jt-text-muted);
                padding: 0 4px;
            }
        `;

        static properties = {
            label: { type: String },
            min: { type: Number },
            max: { type: Number },
            value: { type: Number },
            step: { type: Number },
            format: { type: String },
            componentKey: { type: String, attribute: 'component-key' },
            help: { type: String },
            disabled: { type: Boolean },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String }
        };

        constructor() {
            super();
            this.min = 0;
            this.max = 100;
            this.value = 50;
            this.step = 1;
            this.disabled = false;
            this.labelVisibility = 'visible';

            // Local state for smooth dragging
            this.dragging = false;
            this.tempValue = this.value;
        }

        updated(changedProperties) {
            // Update tempValue when value changes from backend (but not during dragging)
            if (changedProperties.has('value') && !this.dragging) {
                this.tempValue = this.value;
            }
        }


        formatValue(value) {
            if (this.format) {
                // Simple format processing
                if (this.format === '%') {
                    return `${(value * 100).toFixed(0)}%`;
                }
                if (this.format.startsWith('.')) {
                    const decimals = parseInt(this.format.slice(1)) || 0;
                    return value.toFixed(decimals);
                }
                return this.format.replace('%s', value.toString());
            }

            // Auto-format based on step
            if (this.step < 1) {
                const decimals = this.step.toString().split('.')[1]?.length || 1;
                return value.toFixed(decimals);
            }

            return Math.round(value).toString();
        }

        getThumbPosition(value) {
            const percentage = ((value - this.min) / (this.max - this.min)) * 100;
            return Math.max(0, Math.min(100, percentage));
        }

        handleInput(e) {
            if (this.disabled) return;

            const newValue = parseFloat(e.target.value);
            this.dragging = true;
            this.tempValue = newValue;

            // Update visual state only, no WebSocket communication
            this.requestUpdate();
        }

        handleChange(e) {
            if (this.disabled) return;

            const newValue = parseFloat(e.target.value);
            this.dragging = false;
            this.tempValue = newValue;
            this.value = newValue;

            // Emit value change only when drag ends
            window.javelit.sendComponentUpdate(this.componentKey, newValue);
        }

        render() {
            // Use tempValue during dragging for smooth visual feedback
            const currentValue = this.dragging ? this.tempValue : this.value;
            const thumbPosition = this.getThumbPosition(currentValue);
            const progressWidth = thumbPosition;

            // Set width CSS variable if width is specified and not "stretch"
            if (this.width && this.width !== 'stretch') {
                this.style.setProperty('--slider-width', `${this.width}px`);
            } else {
                this.style.removeProperty('--slider-width');
            }

            // TODO: Implement dual-thumb range slider UI
            // For now, range sliders will display as single sliders with the start value
            // Full range slider implementation requires:
            // - Dual thumb rendering and positioning
            // - Range progress bar between thumbs
            // - Independent thumb dragging
            // - Range value emission to WebSocket

            return html`
                <div class="slider-container">
                    <div class="slider-content">
                        ${this.labelVisibility !== 'collapsed' ? html`
                            <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                ${this.labelVisibility === 'hidden' ? '' : html`<div class="markdown-content">${unsafeHTML(this.label)}</div>`}
                            </div>
                        ` : ''}

                        <div class="slider-track-container">
                            <div class="slider-track">
                                <div class="slider-progress" style="width: ${progressWidth}%"></div>
                                <input
                                        type="range"
                                        class="slider-input"
                                        min="${this.min}"
                                        max="${this.max}"
                                        step="${this.step}"
                                        .value="${currentValue}"
                                        ?disabled="${this.disabled}"
                                        @input="${this.handleInput}"
                                        @change="${this.handleChange}"
                                />
                                <div class="slider-thumb" style="left: ${thumbPosition}%"></div>
                                <div class="value-display" style="left: ${thumbPosition}%">
                                    ${this.formatValue(currentValue)}
                                </div>
                            </div>
                        </div>

                        <div class="min-max-labels">
                            <span>${this.formatValue(this.min)}</span>
                            <span>${this.formatValue(this.max)}</span>
                        </div>
                    </div>

                    ${this.help ? html`
                        <jt-tooltip text="${this.help}"></jt-tooltip>
                    ` : ''}
                </div>
            `;
        }
    }

    customElements.define('jt-slider', JtSlider);
</script>
