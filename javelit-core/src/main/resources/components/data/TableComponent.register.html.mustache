{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
import { LitElement, html, css } from '{{ LIT_DEPENDENCY }}';

class JtTable extends LitElement {
    static styles = css`
        :host {
            display: block;
            width: 100%;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        }
        
        .table-container {
            overflow-x: auto;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            background-color: white;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }
        
        th {
            background-color: #f8f9fa;
            color: #495057;
            font-weight: 600;
            text-align: left;
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
            position: sticky;
            top: 0;
            z-index: 1;
            white-space: nowrap;
        }
        
        td {
            padding: 0.75rem;
            border-bottom: 1px solid #f1f3f4;
            vertical-align: top;
        }
        
        tr:hover {
            background-color: #f8f9fa;
        }
        
        tr:last-child td {
            border-bottom: none;
        }
        
        .empty-cell {
            color: #6c757d;
            font-style: italic;
        }
        
        .null-value {
            opacity: 0.5;
        }
        
        .empty-state {
            text-align: center;
            padding: 2rem;
            color: #6c757d;
            font-style: italic;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            th, td {
                padding: 0.5rem;
                font-size: 0.875rem;
            }
        }
    `;

    static properties = {
        columns: { type: Array },
        values: { type: Array }
    };

    constructor() {
        super();
        this.columns = [];
        this.values = [];
    }

    render() {
        if (!this.columns || this.columns.length === 0) {
            return html`
                <div class="empty-state">
                    No columns defined
                </div>
            `;
        }

        return html`
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${this.columns.map(column => html`
                                <th>${column}</th>
                            `)}
                        </tr>
                    </thead>
                    <tbody>
                        ${this.values && this.values.length > 0 ? 
                            this.values.map(row => html`
                                <tr>
                                    ${this.columns.map((_, index) => html`
                                        <td class="${this.getCellClass(row[index])}">
                                            ${this.renderCell(row[index])}
                                        </td>
                                    `)}
                                </tr>
                            `) : 
                            html`
                                <tr>
                                    <td colspan="${this.columns.length}" class="empty-state">
                                        No data available
                                    </td>
                                </tr>
                            `
                        }
                    </tbody>
                </table>
            </div>
        `;
    }

    getCellClass(value) {
        return value === null || value === undefined ? 'null-value' : '';
    }

    renderCell(value) {
        if (value === null || value === undefined) {
            return html`<span class="empty-cell">null</span>`;
        }
        
        // Handle different data types
        if (typeof value === 'boolean') {
            return value ? '' : '';
        }
        
        if (typeof value === 'number') {
            // Format numbers with locale-specific formatting
            return value.toLocaleString();
        }
        
        // Handle arrays and objects by converting to JSON
        if (typeof value === 'object' && value !== null) {
            return JSON.stringify(value);
        }
        
        return String(value);
    }
}

customElements.define('jt-table', JtTable);
</script>
