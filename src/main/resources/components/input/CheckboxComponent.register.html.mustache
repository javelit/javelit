{{!
    Copyright © 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css, unsafeHTML} from '{{ LIT_DEPENDENCY }}';

    class JtCheckbox extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
                width: var(--checkbox-width, auto);
            }

            .checkbox-container {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-sm);
            }

            .checkbox-row {
                display: flex;
                align-items: flex-start;
                width: 100%;
                gap: var(--jt-spacing-sm);
            }

            .checkbox-control {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-sm);
                width: 100%;
            }

            .label-section {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-xs);
                flex: 1;
            }

            .label {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                color: var(--jt-text-primary);
                line-height: var(--jt-line-height-normal);
            }

            .label.spacer {
                visibility: hidden;
            }


            .label a {
                color: var(--jt-theme-color);
                text-decoration: none;
            }

            .label a:hover {
                text-decoration: underline;
            }

            .label del {
                text-decoration: line-through;
            }

            /* Checkbox Styles */
            .checkbox-wrapper {
                position: relative;
                display: flex;
                align-items: flex-start;
                flex-shrink: 0;
                margin-top: 2px; /* Align with text baseline */
            }

            .checkbox-input {
                opacity: 0;
                width: 0;
                height: 0;
                position: absolute;
            }

            .checkbox-visual {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 18px;
                height: 18px;
                background: var(--jt-bg-primary);
                border: 2px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius-sm);
                cursor: pointer;
                transition: all var(--jt-transition-normal);
            }

            .checkbox-visual:hover {
                background-color: var(--jt-bg-secondary);
                border-color: var(--jt-theme-color);
            }

            .checkbox-input:checked + .checkbox-visual {
                background: var(--jt-theme-color);
                border-color: var(--jt-theme-color);
            }

            .checkbox-input:checked + .checkbox-visual::after {
                content: '✓';
                color: var(--jt-text-white);
                font-size: 16px;
                font-weight: bold;
                line-height: 1;
            }

            .checkbox-input:disabled + .checkbox-visual {
                opacity: 0.5;
                cursor: not-allowed;
                pointer-events: none;
            }

            .checkbox-input:disabled + .checkbox-visual:hover {
                background-color: var(--jt-bg-primary);
                border-color: var(--jt-border-color);
            }
        `;

        static properties = {
            label: { type: String },
            help: { type: String },
            disabled: { type: Boolean },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String },
            componentKey: { type: String, attribute: 'component-key' },
            checked: { type: Boolean, reflect: true }
        };

        constructor() {
            super();
            this.disabled = false;
            this.labelVisibility = 'visible';
            this.checked = false;
        }

        connectedCallback() {
            super.connectedCallback();
            this.updateWidth();
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('width')) {
                this.updateWidth();
            }
        }

        updateWidth() {
            if (this.width && this.width !== 'stretch') {
                if (this.width === 'content') {
                    this.style.removeProperty('--checkbox-width');
                } else if (this.width.match(/^\d+$/)) {
                    this.style.setProperty('--checkbox-width', `${this.width}px`);
                }
            } else if (this.width === 'stretch') {
                this.style.setProperty('--checkbox-width', '100%');
            }
        }

        handleCheckbox(e) {
            if (this.disabled) {
                e.preventDefault();
                return;
            }
            this.checked = e.target.checked;
            window.javelit.sendComponentUpdate(this.componentKey, this.checked);
        }

        render() {
            return html`
                <div class="checkbox-container">
                    <div class="checkbox-row">
                        ${this.labelVisibility !== 'collapsed' ? html`
                            <div class="checkbox-control">
                                <label class="checkbox-wrapper">
                                    <input
                                        type="checkbox"
                                        class="checkbox-input"
                                        .checked="${this.checked}"
                                        ?disabled="${this.disabled}"
                                        @change="${this.handleCheckbox}"
                                    >
                                    <span class="checkbox-visual"></span>
                                </label>
                                <div class="label-section">
                                    <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                        ${this.labelVisibility === 'hidden' ? html`&nbsp;` : html`<div class="markdown-content">${unsafeHTML(this.label)}</div>`}
                                    </div>
                                    ${this.help && this.labelVisibility === 'visible' ? html`
                                        <jt-tooltip text="${this.help}"></jt-tooltip>
                                    ` : ''}
                                </div>
                            </div>
                        ` : html`
                            <label class="checkbox-wrapper">
                                <input
                                    type="checkbox"
                                    class="checkbox-input"
                                    .checked="${this.checked}"
                                    ?disabled="${this.disabled}"
                                    @change="${this.handleCheckbox}"
                                >
                                <span class="checkbox-visual"></span>
                            </label>
                        `}
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-checkbox', JtCheckbox);
</script>
