{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css, unsafeHTML} from '{{ LIT_DEPENDENCY }}';

    class JtSelectBox extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
                width: var(--selectbox-width, auto);
            }

            .selectbox-container {
                display: flex;
                flex-direction: column;
                gap: var(--jt-spacing-sm);
            }

            .label-row {
                display: flex;
                align-items: flex-start;
                gap: var(--jt-spacing-xs);
            }

            .label {
                font-family: var(--jt-font-family);
                color: var(--jt-text-primary);
                line-height: var(--jt-line-height-normal);
            }

            .label.spacer {
                visibility: hidden;
            }


            .label a {
                color: var(--jt-theme-color);
                text-decoration: none;
            }

            .label a:hover {
                text-decoration: underline;
            }

            .label del {
                text-decoration: line-through;
            }

            /* Select Dropdown Styles */
            .selectbox-dropdown {
                position: relative;
                display: flex;
                flex-direction: column;
            }

            .selectbox-control {
                display: flex;
                align-items: center;
                min-height: 2rem;
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                background: var(--jt-bg-input);
                border-radius: var(--jt-border-radius-lg);
                cursor: pointer;
                transition: border-color var(--jt-transition-fast), box-shadow var(--jt-transition-fast);
                position: relative;
                font-weight: var(--jt-font-weight-normal);
            }

            .selectbox-control:hover {
                border-color: var(--jt-theme-color);
            }

            .selectbox-control:focus-within,
            .selectbox-control.open {
                outline: none;
                box-shadow: 0 0 0 1px var(--jt-theme-color);
            }

            .selectbox-control.disabled {
                background: var(--jt-bg-secondary);
                border-color: var(--jt-border-color);
                cursor: not-allowed;
                opacity: 0.6;
            }

            .selectbox-control.disabled:hover {
                border-color: var(--jt-border-color);
            }

            .selectbox-value {
                flex: 1;
                font-family: var(--jt-font-family);
                color: var(--jt-text-primary);
                line-height: 1.4;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
                font-weight: var(--jt-font-weight-normal);
            }

            .selectbox-value.placeholder {
                color: var(--jt-text-secondary);
                font-style: normal;
            }


            .selectbox-arrow {
                margin-left: var(--jt-spacing-sm);
                color: var(--jt-text-secondary);
                transition: transform var(--jt-transition-fast);
                font-size: 14px;
                line-height: 1;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .selectbox-control.open .selectbox-arrow {
                transform: rotate(180deg);
            }

            /* Dropdown List */
            .selectbox-options {
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: var(--jt-bg-primary);
                border-radius: var(--jt-border-radius-lg);
                box-shadow: var(--jt-shadow-popover);
                max-height: 200px;
                overflow-y: auto;
                z-index: 1000;
                margin-top: 1px;
            }

            .selectbox-option {
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                cursor: pointer;
                transition: background-color var(--jt-transition-fast);
                font-family: var(--jt-font-family);
                color: var(--jt-text-primary);
                line-height: 1.4;
                font-weight: var(--jt-font-weight-normal);
            }

            .selectbox-option:hover {
                background-color: var(--jt-bg-input);
            }

            .selectbox-option.selected {
                background-color: var(--jt-theme-color);
                color: white;
            }

            .selectbox-option.selected .markdown-content code {
                background-color: rgba(255, 255, 255, 0.2);
            }

            /* Search input for accept new options */
            .selectbox-search {
                width: 100%;
                padding: 0;
                border: none;
                background: transparent;
                font-family: var(--jt-font-family);
                color: var(--jt-text-primary);
                outline: none;
                font-weight: var(--jt-font-weight-normal);
            }

            .selectbox-search::placeholder {
                color: var(--jt-text-secondary);
                font-style: normal;
            }

            .add-option {
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                background-color: var(--jt-bg-secondary);
                color: var(--jt-text-secondary);
                font-style: italic;
                border-top: 1px solid var(--jt-border-color);
                font-weight: var(--jt-font-weight-normal);
            }
        `;

        static properties = {
            label: { type: String },
            optionsJson: { type: String, attribute: 'options-json' },
            index: { type: Number },
            placeholder: { type: String },
            help: { type: String },
            disabled: { type: Boolean },
            acceptNewOptions: { type: Boolean, attribute: 'accept-new-options' },
            labelVisibility: { type: String, attribute: 'label-visibility' },
            width: { type: String },
            componentKey: { type: String, attribute: 'component-key' }
        };

        constructor() {
            super();
            this.disabled = false;
            this.acceptNewOptions = false;
            this.labelVisibility = 'visible';
            this.index = null;
            this.options = [];
            this.isOpen = false;
            this.searchValue = '';
            this.selectedIndex = null;
        }

        connectedCallback() {
            super.connectedCallback();
            this.parseOptions();
            this.updateWidth();
            document.addEventListener('click', this.handleDocumentClick.bind(this));
        }

        disconnectedCallback() {
            super.disconnectedCallback();
            document.removeEventListener('click', this.handleDocumentClick.bind(this));
        }

        updated(changedProperties) {
            super.updated(changedProperties);
            if (changedProperties.has('optionsJson')) {
                this.parseOptions();
            }
            if (changedProperties.has('width')) {
                this.updateWidth();
            }
            if (changedProperties.has('index')) {
                this.selectedIndex = this.index;
            }
        }

        parseOptions() {
            try {
                this.options = this.optionsJson ? JSON.parse(this.optionsJson) : [];
                this.selectedIndex = this.index;
            } catch (e) {
                console.error('Error parsing selectbox options JSON:', e);
                this.options = [];
            }
        }

        updateWidth() {
            if (this.width && this.width !== 'stretch') {
                if (this.width === 'content') {
                    this.style.removeProperty('--selectbox-width');
                } else if (this.width.match(/^\d+$/)) {
                    this.style.setProperty('--selectbox-width', `${this.width}px`);
                }
            } else if (this.width === 'stretch') {
                this.style.setProperty('--selectbox-width', '100%');
            }
        }

        getPlaceholderText() {
            if (this.placeholder) {
                return this.placeholder;
            }

            const hasOptions = this.options && this.options.length > 0;

            if (hasOptions && !this.acceptNewOptions) {
                return 'Choose an option';
            } else if (hasOptions && this.acceptNewOptions) {
                return 'Choose or add an option';
            } else if (!hasOptions && this.acceptNewOptions) {
                return 'Add an option';
            } else {
                return 'No options to select';
            }
        }

        getSelectedOptionText() {
            if (this.selectedIndex !== null && this.selectedIndex >= 0 && this.selectedIndex < this.options.length) {
                return this.options[this.selectedIndex];
            }
            return null;
        }

        handleControlClick() {
            if (this.disabled || (!this.options.length && !this.acceptNewOptions)) {
                return;
            }
            this.isOpen = !this.isOpen;
            this.requestUpdate();
        }

        handleDocumentClick(e) {
            if (!this.contains(e.target)) {
                this.closeDropdown();
            }
        }

        closeDropdown() {
            this.isOpen = false;
            this.searchValue = '';
            this.requestUpdate();
        }

        handleOptionClick(index) {
            if (this.disabled) return;

            this.selectedIndex = index;
            this.closeDropdown();
            window.javelit.sendComponentUpdate(this.componentKey, index);
        }

        handleSearchInput(e) {
            this.searchValue = e.target.value;
            this.requestUpdate();
        }

        handleSearchKeydown(e) {
            if (e.key === 'Enter' && this.acceptNewOptions && this.searchValue.trim()) {
                // Capture value before closing dropdown
                const valueToSend = this.searchValue.trim();
                this.closeDropdown();
                window.javelit.sendComponentUpdate(this.componentKey, valueToSend);
                e.preventDefault();
            } else if (e.key === 'Escape') {
                this.closeDropdown();
                e.preventDefault();
            }
        }

        getFilteredOptions() {
            if (!this.searchValue) {
                return this.options.map((option, index) => ({ option, index }));
            }

            return this.options
                .map((option, index) => ({ option, index }))
                .filter(({ option }) =>
                    option.toLowerCase().includes(this.searchValue.toLowerCase())
                );
        }

        render() {
            const selectedText = this.getSelectedOptionText();
            const placeholderText = this.getPlaceholderText();
            const isDisabled = this.disabled || (!this.options.length && !this.acceptNewOptions);
            const filteredOptions = this.getFilteredOptions();
            const showAddOption = this.acceptNewOptions && this.searchValue.trim() &&
                                 !filteredOptions.some(({option}) =>
                                     option.toLowerCase() === this.searchValue.toLowerCase());

            return html`
                <div class="selectbox-container">
                    ${this.labelVisibility !== 'collapsed' ? html`
                        <div class="label-row">
                            <div class="label ${this.labelVisibility === 'hidden' ? 'spacer' : ''}">
                                ${this.labelVisibility === 'hidden' ? html`&nbsp;` : html`<div class="markdown-content">${unsafeHTML(this.label)}</div>`}
                            </div>
                            ${this.help && this.labelVisibility === 'visible' ? html`
                                <jt-tooltip text="${this.help}"></jt-tooltip>
                            ` : ''}
                        </div>
                    ` : ''}

                    <div class="selectbox-dropdown">
                        <div class="selectbox-control ${this.isOpen ? 'open' : ''} ${isDisabled ? 'disabled' : ''}"
                             @click="${this.handleControlClick}">
                            ${this.acceptNewOptions && this.isOpen ? html`
                                <input
                                    type="text"
                                    class="selectbox-search"
                                    .value="${this.searchValue}"
                                    placeholder="${placeholderText}"
                                    @input="${this.handleSearchInput}"
                                    @keydown="${this.handleSearchKeydown}"
                                    @click="${e => e.stopPropagation()}"
                                >
                            ` : html`
                                <div class="selectbox-value ${selectedText ? '' : 'placeholder'}">
                                    ${selectedText ? html`<div class="markdown-content">${unsafeHTML(selectedText)}</div>` : placeholderText}
                                </div>
                            `}
                            <div class="selectbox-arrow">â¼</div>
                        </div>

                        ${this.isOpen ? html`
                            <div class="selectbox-options">
                                ${filteredOptions.map(({option, index}) => html`
                                    <div class="selectbox-option ${this.selectedIndex === index ? 'selected' : ''}"
                                         @click="${() => this.handleOptionClick(index)}">
                                        <div class="markdown-content">${unsafeHTML(option)}</div>
                                    </div>
                                `)}
                                ${showAddOption ? html`
                                    <div class="selectbox-option add-option"
                                         @click="${() => {
                                             const valueToSend = this.searchValue.trim();
                                             this.closeDropdown();
                                             window.javelit.sendComponentUpdate(this.componentKey, valueToSend);
                                         }}">
                                        Add: "${this.searchValue}"
                                    </div>
                                ` : ''}
                                ${!filteredOptions.length && !showAddOption ? html`
                                    <div class="add-option">No options found</div>
                                ` : ''}
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-selectbox', JtSelectBox);
</script>
