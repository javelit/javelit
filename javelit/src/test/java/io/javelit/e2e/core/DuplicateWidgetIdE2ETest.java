/*
 * Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.javelit.e2e.core;

import com.microsoft.playwright.assertions.LocatorAssertions;
import io.javelit.core.Jt;
import io.javelit.core.JtRunnable;
import io.javelit.e2e.helpers.PlaywrightUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
import static io.javelit.e2e.helpers.PlaywrightUtils.WAIT_1_SEC_MAX;

/**
 * End-to-end tests for DuplicateWidgetIDException handling.
 */
public class DuplicateWidgetIdE2ETest {

    @Test
    void testDuplicateAutoGeneratedKey(TestInfo testInfo) {
        // App with same component called twice without explicit key
        // This should generate the same auto-key and throw DuplicateWidgetIDException
        JtRunnable app = () -> {
            Jt.textInput("Name").use();
            Jt.textInput("Name").use(); // Same label, same params -> same auto-generated key
        };

        // Verify that error message appears mentioning duplicate widget
        PlaywrightUtils.runInBrowser(testInfo, app, page -> {
            // Verify that error message appears mentioning duplicate widget
            assertThat(page.getByText("DuplicateWidgetIDException").first()).isVisible(new LocatorAssertions.IsVisibleOptions().setTimeout(15000));
        });
    }

    @Test
    void testDuplicateExplicitKey(TestInfo testInfo) {
        // App with two different components using same explicit key
        JtRunnable app = () -> {
            Jt.textInput("First Input").key("mykey").use();
            Jt.textInput("Second Input").key("mykey").use(); // Same explicit key
        };

        // Verify that error message appears mentioning duplicate widget
        PlaywrightUtils.runInBrowser(testInfo, app, page -> {
            // Verify that error message appears mentioning duplicate widget
            assertThat(page.getByText("DuplicateWidgetIDException").first()).isVisible(WAIT_1_SEC_MAX);
        });
    }

    @Test
    void testDuplicateKeyAcrossDifferentComponentTypes(TestInfo testInfo) {
        // App with different component types using same explicit key
        JtRunnable app = () -> {
            Jt.textInput("Text").key("shared").use();
            Jt.numberInput("Number", Integer.class).key("shared").use(); // Different type, same key
        };

        PlaywrightUtils.runInBrowser(testInfo, app, page -> {
            assertThat(page.getByText("DuplicateWidgetIDException").first()).isVisible(WAIT_1_SEC_MAX);
        });
    }
}
