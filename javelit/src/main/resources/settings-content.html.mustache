{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
import { LitElement, html, css } from '{{ LIT_DEPENDENCY }}';

class JtSettingsContent extends LitElement {
    static styles = css`
        :host {
            display: block;
            font-family: var(--jt-font-family);
        }

        .settings-container {
            min-height: 200px;
        }

        .settings-section {
            margin-bottom: var(--jt-spacing-2xl);
        }

        .settings-section:last-child {
            margin-bottom: var(--jt-spacing-lg);
        }

        .section-title {
            font-size: var(--jt-font-size-lg);
            font-weight: var(--jt-font-weight-bold);
            color: var(--jt-text-primary);
        }

        .setting-item {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            padding: var(--jt-spacing-lg) 0;
            gap: var(--jt-spacing-lg);
        }

        .setting-info {
            flex: 1;
        }

        .setting-label {
            font-size: var(--jt-font-size-base);
            font-weight: var(--jt-font-weight-medium);
            color: var(--jt-text-primary);
            margin-bottom: var(--jt-spacing-xs);
        }

        .setting-description {
            font-size: var(--jt-font-size-sm);
            color: var(--jt-text-secondary);
            line-height: var(--jt-line-height-relaxed);
        }

        .setting-control {
            flex-shrink: 0;
            display: flex;
            align-items: center;
        }

        /* Toggle Switch */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 48px;
            height: 24px;
        }

        .toggle-input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .toggle-slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--jt-bg-tertiary);
            border: 1px solid var(--jt-border-color);
            transition: all var(--jt-transition-normal);
            border-radius: 24px;
        }

        .toggle-slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 2px;
            top: 2px;
            background: white;
            border-radius: 50%;
            transition: all var(--jt-transition-normal);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .toggle-input:checked + .toggle-slider {
            background: var(--jt-theme-color);
            border-color: var(--jt-theme-color);
        }

        .toggle-input:checked + .toggle-slider:before {
            transform: translateX(24px);
        }

        .toggle-switch:hover .toggle-slider {
            box-shadow: 0 0 0 2px color-mix(in srgb, var(--jt-theme-color) 20%, transparent);

        }

        .placeholder-text {
            text-align: center;
            color: var(--jt-text-secondary);
            padding: var(--jt-spacing-xl);
            font-size: var(--jt-font-size-sm);
        }
    `;

    static properties = {
        config: { type: Object, state: true }
    };

    constructor() {
        super();
        // Load config from localStorage or use defaults
        this.config = this.loadConfig();
    }

    loadConfig() {
        try {
            const stored = localStorage.getItem('javelit-settings');
            return stored ? JSON.parse(stored) : this.getDefaultConfig();
        } catch (e) {
            console.warn('Failed to load settings from localStorage:', e);
            return this.getDefaultConfig();
        }
    }

    getDefaultConfig() {
        return {
            appearance: {
                wideMode: false
            }
        };
    }

    saveConfig() {
        try {
            localStorage.setItem('javelit-settings', JSON.stringify(this.config));
            // Emit config change event for other components to listen
            this.dispatchEvent(new CustomEvent('config-change', {
                detail: { config: this.config },
                bubbles: true,
                composed: true
            }));
        } catch (e) {
            console.error('Failed to save settings to localStorage:', e);
        }
    }

    handleWideModeToggle(e) {
        this.config = {
            ...this.config,
            appearance: {
                ...this.config.appearance,
                wideMode: e.target.checked
            }
        };
        this.saveConfig();
    }

    render() {
        return html`
            <div class="settings-container">
                <div class="settings-section">
                    <div class="section-title">Appearance</div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <div class="setting-label">Wide mode</div>
                            <div class="setting-description">
                                Turn on to make this app occupy the entire width of the screen.
                            </div>
                        </div>
                        <div class="setting-control">
                            <label class="toggle-switch">
                                <input 
                                    type="checkbox" 
                                    class="toggle-input"
                                    .checked="${this.config.appearance.wideMode}"
                                    @change="${this.handleWideModeToggle}"
                                >
                                <span class="toggle-slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
}

customElements.define('jt-settings-content', JtSettingsContent);
</script>
