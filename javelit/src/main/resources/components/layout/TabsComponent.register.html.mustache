{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css} from '{{ LIT_DEPENDENCY }}';
    
    class JtTabs extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
            }
            
            :host([width]:not([width="stretch"])) {
                width: var(--tabs-width);
                max-width: 100%;
            }
            
            .tabs-container {
                width: 100%;
                box-sizing: border-box;
            }
            
            .tabs-header {
                display: flex;
                align-items: flex-end;
                border-bottom: 1px solid var(--jt-border-color);
                position: relative;
                overflow-x: auto;
                scrollbar-width: thin;
            }
            
            .tabs-header::-webkit-scrollbar {
                height: 6px;
            }
            
            .tabs-header::-webkit-scrollbar-track {
                background: transparent;
            }
            
            .tabs-header::-webkit-scrollbar-thumb {
                background: var(--jt-text-muted);
                border-radius: 3px;
            }
            
            .tab {
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                cursor: pointer;
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                font-weight: var(--jt-font-weight-medium);
                color: var(--jt-text-secondary);
                background: transparent;
                border: none;
                position: relative;
                white-space: nowrap;
                transition: color 0.2s ease;
                flex-shrink: 0;
            }
            
            .tab:hover {
                color: var(--jt-text-primary);
            }
            
            .tab.active {
                color: var(--jt-theme-color);
            }
            
            .tab-indicator {
                position: absolute;
                bottom: 0;
                left: 0;
                height: 2px;
                background: var(--jt-theme-color);
                transition: transform 0.3s ease, width 0.3s ease;
                transform-origin: left;
            }
            
            
            .tabs-content {
                width: 100%;
                box-sizing: border-box;
                padding-top: var(--jt-spacing-md);
            }
            
            ::slotted(*) {
                display: none;
            }
            
            ::slotted([slot^="tab_"]) {
                display: block;
            }
        `;
        
        static properties = {
            tabs: {type: Array},
            width: {type: String},
            activeTab: {type: Number, state: true}
        };
        
        constructor() {
            super();
            this.tabs = [];
            this.width = 'stretch';
            this.activeTab = 0;
        }
        
        firstUpdated() {
            // Set up the indicator position for the first tab
            this.updateIndicator();
        }
        
        updated(changedProperties) {
            // Update width CSS variable if needed
            if (changedProperties.has('width')) {
                if (this.width && this.width !== 'stretch') {
                    this.style.setProperty('--tabs-width', `${this.width}px`);
                } else {
                    this.style.removeProperty('--tabs-width');
                }
            }
            
            // Update indicator when active tab changes
            if (changedProperties.has('activeTab')) {
                this.updateIndicator();
                this.updateSlotVisibility();
            }
        }
        
        formatText(label) {
            if (!label) return '';
            
            // Markdown formatting similar to slider
            return label
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/`(.*?)`/g, '<code>$1</code>')
                .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>')
                .replace(/:([a-zA-Z]+)\[(.*?)\]/g, '<span style="color: $1">$2</span>')
                .replace(/~~(.*?)~~/g, '<del>$1</del>');
        }
        
        handleTabClick(index) {
            this.activeTab = index;
        }
        
        updateIndicator() {
            const tabButtons = this.shadowRoot.querySelectorAll('.tab');
            if (tabButtons.length === 0) return;
            
            const activeButton = tabButtons[this.activeTab];
            if (!activeButton) return;
            
            const indicator = this.shadowRoot.querySelector('.tab-indicator');
            if (!indicator) return;
            
            const containerRect = this.shadowRoot.querySelector('.tabs-header').getBoundingClientRect();
            const buttonRect = activeButton.getBoundingClientRect();
            
            const left = buttonRect.left - containerRect.left;
            const width = buttonRect.width;
            
            indicator.style.transform = `translateX(${left}px)`;
            indicator.style.width = `${width}px`;
        }
        
        updateSlotVisibility() {
            // Hide all slots first
            const slots = this.querySelectorAll('[slot^="tab_"]');
            slots.forEach((slot, index) => {
                if (index === this.activeTab) {
                    slot.style.display = 'block';
                } else {
                    slot.style.display = 'none';
                }
            });
        }
        
        render() {
            return html`
                <div class="tabs-container">
                    <div class="tabs-header">
                        ${this.tabs.map((tab, index) => html`
                            <button
                                class="tab markdown-content ${index === this.activeTab ? 'active' : ''}"
                                @click="${() => this.handleTabClick(index)}"
                                .innerHTML="${this.formatText(tab)}"
                            >
                            </button>
                        `)}
                        <div class="tab-indicator"></div>
                    </div>
                    
                    <div class="tabs-content">
                        ${this.tabs.map((_, index) => html`
                            <slot name="tab_${index}"></slot>
                        `)}
                    </div>
                </div>
            `;
        }
    }
    
    customElements.define('jt-tabs', JtTabs);
</script>
