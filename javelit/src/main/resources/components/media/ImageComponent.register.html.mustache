{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import { LitElement, html, css, unsafeHTML } from '{{ LIT_DEPENDENCY }}';

    class JtImage extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-lg) 0;
            }

            :host([width="content"]) {
                width: auto;
            }

            :host([width]:not([width="stretch"]):not([width="content"])) {
                width: var(--image-width);
                max-width: 100%;
            }

            .container {
                position: relative;
                width: 100%;
            }

            .toolbar {
                position: absolute;
                top: 8px;
                right: 8px;
                opacity: 0;
                transition: opacity 0.2s ease-in-out;
                z-index: 10;
            }

            .content:hover .toolbar {
                opacity: 1;
            }

            .toolbar button {
                background: rgba(255, 255, 255, 0.9);
                border: 1px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius-sm);
                padding: 6px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background 0.2s ease;
            }

            .toolbar button:hover {
                background: rgba(255, 255, 255, 1);
            }

            .toolbar button .material-symbols-rounded {
                font-size: 18px;
                color: var(--jt-text-primary);
            }

            .material-symbols-rounded {
                font-family: 'Material Symbols Rounded';
            }

            .content {
                position: relative;
                display: inline-block;
                max-width: 100%;
            }

            .image-wrapper {
                display: block;
            }

            .image-wrapper img {
                display: block;
                max-width: 100%;
                height: auto;
                border-radius: var(--jt-border-radius-lg);
            }

            .caption-wrapper {
                margin-top: var(--jt-spacing-md);
            }

            .caption {
                font-family: "Source Sans Pro", sans-serif;
                font-size: 0.875rem;
                opacity: 0.6;
                color: inherit;
                max-width: 100%;
                overflow-wrap: break-word;
                text-align: center;
            }

            .markdown-content {
                text-align: center;
            }

            /* Fullscreen mode */
            :host([is-fullscreen]) .container {
                position: fixed;
                inset: 0;
                z-index: 1000050;
                background: rgb(255, 255, 255);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                padding: 3rem 1.5rem 1.5rem;
                width: auto;
            }

            :host([is-fullscreen]) .content {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: var(--jt-spacing-md);
            }

            :host([is-fullscreen]) .image-wrapper img {
                max-height: calc(100vh - 150px);
                max-width: 100%;
                object-fit: contain;
            }

            :host([is-fullscreen]) .caption-wrapper {
                margin-top: 0;
                text-align: center;
            }

            :host([is-fullscreen]) .toolbar {
                opacity: 1;
            }
        `;

        static properties = {
            url: { type: String },
            caption: { type: String },
            width: { type: String, reflect: true },
            isFullscreen: { type: Boolean, attribute: 'is-fullscreen', reflect: true}
        };

        constructor() {
            super();
            this.isFullscreen = false;
        }

        toggleFullscreen() {
            this.isFullscreen = !this.isFullscreen;
            this.requestUpdate();
        }

        render() {
            // Set width CSS variable if width is specified and is a pixel value
            if (this.width && /^\d+$/.test(this.width)) {
                this.style.setProperty('--image-width', `${this.width}px`);
            } else {
                this.style.removeProperty('--image-width');
            }

            return html`
                <div class="container">
                    <div class="content">
                        <div class="toolbar">
                            <button @click="${this.toggleFullscreen}" aria-label="${this.isFullscreen ? 'Exit fullscreen' : 'Fullscreen'}">
                                <span class="material-symbols-rounded">
                                    ${this.isFullscreen ? 'fullscreen_exit' : 'fullscreen'}
                                </span>
                            </button>
                        </div>
                        <div class="image-wrapper">
                            <img src="${this.url}" alt="${this.caption || ''}" />
                        </div>
                        ${this.caption ? html`
                            <div class="caption-wrapper">
                                <div class="caption markdown-content">${unsafeHTML(this.caption)}</div>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-image', JtImage);
</script>
