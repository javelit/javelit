{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import {LitElement, html, css, unsafeHTML} from '{{ LIT_DEPENDENCY }}';

    class JtButton extends LitElement {
        static styles = css`
            {{{ MARKDOWN_CSS }}}

            :host {
                display: block;
                margin: var(--jt-spacing-md) 0;
            }

            .button-container {
                display: flex;
                align-items: center;
                gap: var(--jt-spacing-sm);
            }

            .button {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                gap: var(--jt-spacing-sm);

                padding: var(--jt-spacing-sm) var(--jt-spacing-lg);
                border: 1px solid transparent;
                border-radius: var(--jt-border-radius);

                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                font-weight: var(--jt-font-weight-medium);
                line-height: var(--jt-line-height-tight);
                text-decoration: none;
                white-space: nowrap;

                cursor: pointer;
                transition: all var(--jt-transition-fast);

                position: relative;
                overflow: hidden;
            }

            :host([use-container-width]) .button {
                width: 100%;
            }

            .button:focus {
                outline: 2px solid var(--jt-primary-color);
                outline-offset: 2px;
            }

            .button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                pointer-events: none;
            }

            /* Button Types */

            .button.primary {
                background-color: var(--jt-theme-color);
                color: var(--jt-text-white);
                border-color: var(--jt-theme-color);
            }

            .button.primary:hover:not(:disabled) {
                background-color: var(--jt-theme-hover);
                border-color: var(--jt-theme-hover);
                transform: translateY(-1px);
                box-shadow: var(--jt-shadow);
            }

            .button.primary:active:not(:disabled) {
                background-color: var(--jt-theme-active);
                border-color: var(--jt-theme-active);
                transform: translateY(0);
                box-shadow: var(--jt-shadow-sm);
            }

            .button.secondary {
                background-color: var(--jt-bg-primary);
                color: var(--jt-text-primary);
                border-color: var(--jt-border-color);
            }

            .button.secondary:hover:not(:disabled) {
                background-color: var(--jt-bg-primary);
                border-color: var(--jt-theme-color);
                color: var(--jt-theme-color);
                transform: translateY(-1px);
                box-shadow: var(--jt-shadow);
            }

            .button.secondary:active:not(:disabled) {
                background-color: var(--jt-bg-secondary);
                border-color: var(--jt-theme-active);
                color: var(--jt-theme-active);
                transform: translateY(0);
                box-shadow: var(--jt-shadow-sm);
            }

            .button.tertiary {
                background-color: transparent;
                color: var(--jt-text-secondary);
                border-color: transparent;
            }

            .button.tertiary:hover:not(:disabled) {
                background-color: transparent;
                color: var(--jt-theme-color);
                border-color: transparent;
            }

            .button.tertiary:active:not(:disabled) {
                background-color: var(--jt-bg-secondary);
                color: var(--jt-theme-active);
            }

            /* Icon styling */

            .icon {
                font-size: var(--jt-font-size-lg);
                font-family: 'Material Symbols Rounded';
                font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
            }

            .emoji-icon {
                font-size: var(--jt-font-size-base);
            }

            /* Ripple effect */

            .button::after {
                content: '';
                position: absolute;
                top: 50%;
                left: 50%;
                width: 0;
                height: 0;
                border-radius: 50%;
                background: rgba(255, 255, 255, 0.3);
                transform: translate(-50%, -50%);
                transition: width 0.3s, height 0.3s;
            }

            .button:active::after {
                width: 200px;
                height: 200px;
            }

            /* Button-specific markdown overrides */
            .button code {
                background-color: rgba(255, 255, 255, 0.2);
            }

            .button.primary code {
                background-color: rgba(255, 255, 255, 0.3);
            }

            .button.secondary code, .button.tertiary code {
                background-color: rgba(0, 0, 0, 0.1);
            }

            .button a {
                color: inherit;
                text-decoration: underline;
            }
        `;

        static properties = {
            label: {type: String},
            type: {type: String},
            icon: {type: String},
            help: {type: String},
            disabled: {type: Boolean},
            useContainerWidth: {type: Boolean, attribute: 'use-container-width'},
            componentKey: {type: String, attribute: 'component-key'}
        };

        constructor() {
            super();
            this.type = 'secondary';
            this.disabled = false;
            this.useContainerWidth = false;
        }


        isEmoji(str) {
            // Simple emoji detection
            return str && str.length <= 2 && /\p{Emoji}/u.test(str);
        }

        isMaterialIcon(str) {
            return str && str.startsWith(':') && str.endsWith(':') && str.length > 2;
        }

        getMaterialIconName(str) {
            if (!this.isMaterialIcon(str)) return '';
            return str.slice(1, -1);  // Remove leading and trailing colons
        }

        handleClick(e) {
            if (this.disabled) return;

            // Create ripple effect
            const button = e.currentTarget;
            const rect = button.getBoundingClientRect();
            const size = Math.max(rect.width, rect.height);
            const x = e.clientX - rect.left - size / 2;
            const y = e.clientY - rect.top - size / 2;

            const ripple = document.createElement('span');
            ripple.style.cssText = `
                        position: absolute;
                        border-radius: 50%;
                        background: rgba(255, 255, 255, 0.3);
                        transform: scale(0);
                        animation: ripple 0.6s linear;
                        left: ${x}px;
                        top: ${y}px;
                        width: ${size}px;
                        height: ${size}px;
                    `;

            button.appendChild(ripple);
            setTimeout(() => ripple.remove(), 600);

            // Emit button click
            window.javelit.sendComponentUpdate(this.componentKey, true);
        }

        render() {
            const iconContent = this.icon ? (
                    this.isEmoji(this.icon) ?
                            html`<span class="emoji-icon">${this.icon}</span>` :
                            this.isMaterialIcon(this.icon) ?
                                html`<span class="icon">${this.getMaterialIconName(this.icon)}</span>` :
                                null
            ) : null;

            return html`
                <style>
                    @keyframes ripple {
                        to {
                            transform: scale(4);
                            opacity: 0;
                        }
                    }
                </style>
                <div class="button-container">
                    <button
                            class="button ${this.type}"
                            ?disabled="${this.disabled}"
                            @click="${this.handleClick}"
                            type="button">
                        ${iconContent}
                        <span class="markdown-content">${unsafeHTML(this.label)}</span>
                    </button>
                    ${this.help ? html`
                        <jt-tooltip text="${this.help}"></jt-tooltip>
                    ` : ''}
                </div>
            `;
        }
    }

    customElements.define('jt-button', JtButton);
</script>
