{{!
    Copyright Â© 2025 Cyril de Catheu (cdecatheu@hey.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
}}
<script type="module">
    import { LitElement, html, css } from '{{ LIT_DEPENDENCY }}';

    class JtConnectionErrorModal extends LitElement {
        static styles = css`
            :host {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                z-index: 9999;
                display: none;
            }

            :host([show]) {
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .modal-overlay {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.5);
            }

            .modal-container {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: var(--jt-bg-primary);
                border-radius: var(--jt-border-radius-lg);
                box-shadow: var(--jt-shadow-lg);
                min-width: 400px;
                max-width: 80%;
                margin: var(--jt-spacing-xl);
                z-index: 1;
                max-height: 90%;
                display: flex;
                flex-direction: column;
            }

            :host([top-aligned]) .modal-container {
                top: 8%;
                transform: translate(-50%, 0);
            }

            .modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: var(--jt-spacing-lg);
                border-bottom: 1px solid var(--jt-border-color);
            }

            :host([prevent-close]) .modal-header {
                justify-content: center;
            }

            .modal-title {
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-lg);
                font-weight: var(--jt-font-weight-bold);
                color: var(--jt-text-primary);
                margin: 0;
            }

            .close-button {
                background: none;
                border: none;
                font-family: 'Material Symbols Rounded';
                font-size: var(--jt-font-size-xl);
                color: var(--jt-text-secondary);
                cursor: pointer;
                padding: var(--jt-spacing-xs);
                border-radius: var(--jt-border-radius);
                transition: background-color var(--jt-transition-fast), color var(--jt-transition-fast);
            }

            .close-button:hover {
                background-color: var(--jt-bg-tertiary);
                color: var(--jt-text-primary);
            }

            .modal-body {
                padding: var(--jt-spacing-lg);
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                line-height: var(--jt-line-height-relaxed);
                color: var(--jt-text-primary);
                position: relative;
            }

            .code-snippet {
                background: var(--jt-bg-secondary);
                border: 1px solid var(--jt-border-color);
                border-radius: var(--jt-border-radius);
                padding: var(--jt-spacing-sm) var(--jt-spacing-md);
                margin: var(--jt-spacing-md) 0;
                font-family: var(--jt-font-family-mono);
                font-size: var(--jt-font-size-sm);
                color: var(--jt-text-primary);
                cursor: pointer;
                user-select: all;
                position: relative;
                transition: background-color var(--jt-transition-fast);
            }

            .code-snippet:hover {
                background: var(--jt-bg-tertiary);
            }


            ::slotted(h1), ::slotted(h2), ::slotted(h3) {
                margin: 0;
                font-family: var(--jt-font-family);
                font-weight: var(--jt-font-weight-bold);
                color: var(--jt-text-primary);
            }

            ::slotted(p) {
                margin: 0 0 var(--jt-spacing-md) 0;
                font-family: var(--jt-font-family);
                font-size: var(--jt-font-size-base);
                line-height: var(--jt-line-height-relaxed);
                color: var(--jt-text-primary);
            }

            ::slotted(p:last-child) {
                margin-bottom: 0;
            }

        `;

        static properties = {
            show: { type: Boolean, reflect: true },
            preventClose: { type: Boolean, reflect: true, attribute: 'prevent-close' }
        };

        constructor() {
            super();
            this.show = false;
            this.preventClose = false;
        }

        firstUpdated() {
            super.firstUpdated();
        }


        handleCloseClick() {
            this.show = false;
            this.dispatchEvent(new CustomEvent('modal-close', {
                bubbles: true,
                composed: true
            }));
        }

        handleOverlayClick(e) {
            // Only close if clicking the overlay itself, not the modal content
            // And only if closing is not prevented
            if (e.target === e.currentTarget && !this.preventClose) {
                this.handleCloseClick();
            }
        }

        render() {
            return html`
                <div class="modal-overlay" @click="${this.handleOverlayClick}">
                    <div class="modal-container">
                        <div class="modal-header">
                            <div class="modal-title">
                                <slot name="title">Modal</slot>
                            </div>
                            ${!this.preventClose ? html`
                                <button class="close-button" @click="${this.handleCloseClick}">
                                    close
                                </button>
                            ` : ''}
                        </div>
                        <div class="modal-body">
                            <slot></slot>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    customElements.define('jt-connection-error-modal', JtConnectionErrorModal);
</script>
